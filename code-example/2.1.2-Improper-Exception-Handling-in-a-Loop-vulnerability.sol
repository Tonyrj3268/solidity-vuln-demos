// 漏洞程式碼：
// 此程式碼展示了一個 Improper Exception Handling in a Loop 漏洞
// 問題說明：
// 在迴圈中直接使用 transfer 進行付款，當遇到失敗的轉帳（例如轉帳到惡意回退的合約）時，
// 整個交易會回退，導致前面成功的操作都被撤銷，且消耗的 gas 也不會退還給使用者

contract CallsInLoop {
    address[] public destinations; // 受款方列表，若其中含有惡意合約，容易觸發漏洞

    // 部署時設定受款方地址陣列
    constructor(address[] memory newDestinations) public {
        destinations = newDestinations;
    }

    // 漏洞函式：在迴圈中直接使用 transfer 可能導致整個交易失敗
    function bad() external {
        for (uint i = 0; i < destinations.length; i++) { // 修正前的原始碼可能誤寫為 i > destinations.length
            // 漏洞點：若 destinations[i] 是一個惡意合約，transfer 會觸發回退，導致整個迴圈失敗
            destinations[i].transfer(i);
        }
    }
}
