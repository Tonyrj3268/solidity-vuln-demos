/*
SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

/*
漏洞名稱: Improper Exception Handling in a Loop
描述: 當迴圈內的某個 transfer 呼叫失敗時，整個交易因例外處理不當而導致回滾，進而產生大量的 gas 消耗，甚至可能因為交易太大而無法打包成區塊。攻擊者可以藉由在目標列表中放入一個惡意合約地址，該地址的 fallback 函式故意 revert，進而使整個迴圈中的所有操作回滾，造成使用者需要重複執行交易並承擔額外費用。

攻擊步驟:
1. 部署一個惡意合約 MaliciousReceiver，其 fallback 函式會 revert。
2. 準備一個 address payable 陣列，其中至少包含一個 MaliciousReceiver 的地址（型別必須為 address payable）。
3. 部署 CallsInLoop 合約並將該地址陣列傳入建構子。
4. 呼叫 bad() 函式，由於 iteration 遇到惡意合約，將導致 transfer 呼叫失敗，整個交易將被回滾，同時耗費大量 gas。
*/

contract CallsInLoop {
    // 漏洞重點：此陣列應該存放可支付的位址
    address payable[] public destinations; 

    // 建構子：初始化目標地址列表
    constructor(address payable[] memory newDestinations) {
        destinations = newDestinations;
    }

    // 漏洞函式：在迴圈中使用 transfer 進行轉帳，如果其中一個呼叫失敗，整個交易將被回滾
    function bad() external payable {
        // 正確的迴圈條件
        for (uint i = 0; i < destinations.length; i++) {
            // 漏洞處：直接在迴圈中使用 transfer, 若失敗則整條交易回滾
            destinations[i].transfer(i);
        }
    }
}

// 攻擊合約：該合約在 fallback 中故意 revert 以觸發 transfer 失敗
contract MaliciousReceiver {
    // fallback 必須標示為 payable 才能接收 Ether，但此處故意 revert
    fallback() external payable {
        revert("MaliciousReceiver: rejecting transfer");
    }
}
