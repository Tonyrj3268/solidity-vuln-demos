/*
漏洞詳細說明：
1. MultiOwnable 合約中 newOwner 函式未加上 onlyOwner 修飾符，導致任何人都可以呼叫並將自己加入 owners，繞過權限控制，這是主要漏洞點。
2. 在 TestContract 合約中 withdrawAll 函式使用 address(this).balance 一次性傳送所有資金，可能導致高額資金在不合意情況下全部被提走，這也是一個高風險操作。
*/

contract MultiOwnable {
    // 儲存 owner 資訊，mapping 類型儲存各地址的 owner 授權
    mapping(address => address) public owners;

    // 檢查呼叫者是否為 owner
    modifier onlyOwner() {
        require(owners[msg.sender] != address(0), "Only owner can call");
        _;
    }

    // 漏洞：此 newOwner 未加上 onlyOwner 修飾符，任何人均可呼叫此函式，進而新增 owner
    function newOwner(address _owner) external returns (bool) {
        require(_owner != address(0), "Invalid address");
        owners[_owner] = msg.sender;
        return true;
    }
}

contract TestContract is MultiOwnable {
    // 漏洞：withdrawAll 使用 address(this).balance 將所有合約餘額轉出，未作金額限制，並且因前述 newOwner 漏洞，攻擊者可提領全部資金
    function withdrawAll() external onlyOwner {
        msg.sender.transfer(address(this).balance);
    }
    
    // 支持接收 ether 的 fallback 函式
    function() external payable {}
}