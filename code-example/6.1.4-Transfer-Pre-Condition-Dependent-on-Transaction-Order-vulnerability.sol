// 漏洞程式碼示例：
// 此合約存在 'Transfer Pre-Condition Dependent on Transaction Order' 漏洞，
// 因為買入函式 buy() 沒有任何交易順序的檢查，導致 owner 更改價格（setPrice）時，
// 部分買入交易會因交易排序不同而執行不當，甚至在某些情況下被忽略

pragma solidity ^0.4.18;

contract TransactionOrdering {
    // 漏洞重點：價格依賴全域狀態，並且缺乏交易順序驗證
    uint256 price; // 目前價格，未與交易順序掛鉤
    address owner;
    event Purchase(address _buyer, uint256 _price);
    event PriceChange(address _owner, uint256 _price);

    modifier ownerOnly() {
        require(msg.sender == owner); // 僅允許 owner 執行相關操作
        _;
    }

    // 建構子，初始化 owner 與價格
    function TransactionOrdering() public {
        owner = msg.sender;
        price = 100;
    }

    // 買入函式存在漏洞：
    // 未檢查任何前置條件以確保交易排序，因此可能受交易排序影響，導致交易執行順序錯亂
    function buy() public returns (uint256) {
        Purchase(msg.sender, price);
        return price;
    }

    // 僅允許 owner 更新價格
    function setPrice(uint256 _price) public ownerOnly {
        price = _price;
        PriceChange(owner, price);
    }
}
