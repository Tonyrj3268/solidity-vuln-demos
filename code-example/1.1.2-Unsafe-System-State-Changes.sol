// 假設 Called 為一個外部合約介面，包含函式 f()
contract Called {
    function f() public;
}

contract TestContract {
    // 狀態變數：計數器
    uint public counter;
    
    // 事件：用來記錄 counter 變化
    event Counter(uint counter);

    // ===============================================
    // 漏洞版本：bugVulnerable
    // ===============================================
    // 描述：
    // 在此版本中，counter 在外部呼叫 d.f() 之前被遞增，
    // 但事件 Counter 的觸發卻安排在外部呼叫之後。
    // 若 d.f() 觸發了重入攻擊或其他意外的系統狀態改變，
    // 將會影響 counter 的最終值，導致事件記錄與內部狀態不一致，
    // 進而使系統進入不可預期的狀態。
    function bugVulnerable(Called d) public {
        // 【漏洞段落】：先更新 counter，後進行外部呼叫
        counter += 1;
        
        // 【漏洞段落】：進行外部呼叫 d.f() 之前內部狀態未完全鎖定，
        // 可能導致外部呼叫期間重入並改變系統狀態
        d.f();
        
        // 【漏洞段落】：在外部呼叫後觸發事件，狀態可能已被外部修改
        emit Counter(counter);
    }

    // ===============================================
    // 修正版本：bugSafe
    // ===============================================
    // 修正重點：
    // 為避免外部呼叫影響系統狀態，必須先發出事件，
    // 確保所有內部狀態更新在外部呼叫之前完成，
    // 這樣可以降低外部呼叫對系統狀態造成的影響。
    function bugSafe(Called d) public {
        // 【修正段落】：先更新內部狀態
        counter += 1;
        
        // 【修正段落】：先發出事件，鎖定當前狀態，確保後續外部呼叫不會影響已記錄的狀態
        emit Counter(counter);
        
        // 【修正段落】：最後再進行外部呼叫，降低意外狀態變更的風險
        d.f();
    }
}
