interface Called {
    function f() external;
}

contract Vulnerable {
    // 狀態變數，用於記錄合約被呼叫的次數
    uint public counter;
    
    event Counter(uint value);
    
    // 此函式包含漏洞：狀態變更（counter += 1）發生在外部呼叫之前，但事件發出在外部呼叫之後
    // 這使得外部呼叫可以在完整的狀態轉換完成前干擾合約狀態
    function bug(Called d){
        counter += 1;      // 危險：在外部呼叫前就更改了狀態
        d.f();             // 危險：呼叫外部合約，可能會被用於重入攻擊
        emit Counter(counter); // 此事件觸發時，counter 可能已經被非預期地多次增加
    }
    
    // 其他合約功能...
    function getCounter() public view returns (uint) {
        return counter;
    }
}

/*
漏洞說明：
「不安全系統狀態變更」漏洞是因為合約在執行外部呼叫前就修改了狀態變數（counter += 1），
但在完成整個交易前（發出事件前），外部呼叫可能會重新進入合約。這會導致狀態變數被多次
或非預期地修改，破壞合約的邏輯完整性。

雖然這種漏洞與重入攻擊相似，但主要區別在於它不一定直接涉及資金轉移，而是影響合約的
邏輯執行和系統狀態。在此例中，counter 變數在一次交易中可能被多次增加，導致最終狀態
與預期不符。
*/